/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app; 

import dal.Repository;
import dal.RepositoryFactory;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File; 
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import javax.swing.text.JTextComponent;
import models.Genre;
import models.Movie;
import models.MovieTableModel;
import models.Person;
import models.PersonTransferable;

/**
 *
 * @author Mateo
 */
public class MoviesPanel extends javax.swing.JPanel {

    private static final String DIR = "assets";
    
    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;
    private List<JList> elementLists;
    private Repository repo;
    
    private MovieTableModel moviesTableModel;
    
    private final DefaultListModel<Genre> allGenresModel = new DefaultListModel<>();
    private final DefaultListModel<Genre> genresModel = new DefaultListModel<>();
    private final DefaultListModel<Person> allPeopleModel = new DefaultListModel<>();
    private final DefaultListModel<Person> actorsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> directorsModel = new DefaultListModel<>();
    
    private List<DefaultListModel> elementModels;
    private List<Genre> allGenres;
    private List<Person> allPeople;
    
    private JList<Person> sender;

    private Movie selectedMovie;
    /**
     * Creates new form MoviesPanel
     */
    public MoviesPanel() {
        initComponents();
    }
    
    
    
     

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblMovies = new javax.swing.JTable();
        lblPoster = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        tfPicturePath = new javax.swing.JTextField();
        lblTitleError = new javax.swing.JLabel();
        btnChoose = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        tfDuration = new javax.swing.JTextField();
        lblDurationError = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        tfDate = new javax.swing.JTextField();
        lblDateError = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblDescError = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsAllPeople = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        lsDirectors = new javax.swing.JList<>();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        lsAllGenres = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        lsCurrentGenres = new javax.swing.JList<>();
        btnAddGenre = new javax.swing.JButton();
        btnRemoveGenre = new javax.swing.JButton();
        lblPictureError = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(1025, 950));
        setPreferredSize(new java.awt.Dimension(1025, 950));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tblMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMoviesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMovies);

        lblPoster.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        lblPoster.setMaximumSize(new java.awt.Dimension(350, 500));
        lblPoster.setMinimumSize(new java.awt.Dimension(350, 500));
        lblPoster.setPreferredSize(new java.awt.Dimension(300, 350));

        jLabel3.setText("Title :");

        lblTitleError.setForeground(new java.awt.Color(255, 0, 0));

        btnChoose.setText("Choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        jLabel4.setText("Duration :");

        tfDuration.setName("Duration"); // NOI18N

        lblDurationError.setForeground(new java.awt.Color(255, 0, 0));

        btnAdd.setText("Add movie");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setText("Update movie");
        btnEdit.setHideActionText(true);
        btnEdit.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        btnEdit.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete movie");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel5.setText("Premieres on :");

        tfDate.setName("Date"); // NOI18N

        lblDateError.setForeground(new java.awt.Color(255, 0, 0));

        jLabel6.setText("Description :");

        lblDescError.setForeground(new java.awt.Color(255, 0, 0));

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        jScrollPane2.setViewportView(taDescription);

        jScrollPane3.setHorizontalScrollBar(null);

        lsAllPeople.setMaximumSize(new java.awt.Dimension(174, 131));
        lsAllPeople.setPreferredSize(null);
        jScrollPane3.setViewportView(lsAllPeople);

        jLabel1.setText("People :");

        jScrollPane4.setHorizontalScrollBar(null);

        lsActors.setMaximumSize(new java.awt.Dimension(174, 131));
        lsActors.setMinimumSize(new java.awt.Dimension(174, 131));
        lsActors.setPreferredSize(null);
        jScrollPane4.setViewportView(lsActors);

        jLabel2.setText("Actors :");

        jScrollPane5.setViewportView(lsDirectors);

        jLabel7.setText("Directors :");

        jScrollPane6.setHorizontalScrollBar(null);

        jScrollPane6.setViewportView(lsAllGenres);

        jLabel8.setText("All genres :");

        jLabel9.setText("Current movie genres :");

        jScrollPane7.setViewportView(lsCurrentGenres);

        btnAddGenre.setText("Add genre");
        btnAddGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddGenreActionPerformed(evt);
            }
        });

        btnRemoveGenre.setText(" Remove genre");
        btnRemoveGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveGenreActionPerformed(evt);
            }
        });

        lblPictureError.setForeground(new java.awt.Color(255, 0, 0));

        btnClear.setText("Clear form");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 874, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfDate, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblDateError))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblDescError))
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnRemoveGenre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnAddGenre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPictureError)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(61, 61, 61)
                                        .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblPoster, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(2, 2, 2)))
                                .addComponent(btnChoose)))
                        .addContainerGap(53, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfDate, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblDescError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAddGenre)
                                .addGap(18, 18, 18)
                                .addComponent(btnRemoveGenre)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPoster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPictureError, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdd))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(276, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        
        init();
        
        
    }//GEN-LAST:event_formComponentShown

    private void tblMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMoviesMouseClicked
        try {
            showMovie();
        } catch (Exception ex) {
            Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tblMoviesMouseClicked

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        
        Optional<File> file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        tfPicturePath.setText(file.get().getAbsolutePath());
        setIcon(lblPoster, file.get());
        
    }//GEN-LAST:event_btnChooseActionPerformed

    private void btnAddGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddGenreActionPerformed
       
        swapListItem(lsAllGenres, lsCurrentGenres);
    }//GEN-LAST:event_btnAddGenreActionPerformed

    private void btnRemoveGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveGenreActionPerformed
       
      swapListItem(lsCurrentGenres, lsAllGenres);
    }//GEN-LAST:event_btnRemoveGenreActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
       
        
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose a movie for deletion");
            return;
        }
        if (MessageUtils.showConfirmDialog(
                "Delete movie",
                "Do you really want to delete this movie?") == JOptionPane.YES_OPTION) {
            try {
                if (selectedMovie.getPicturepath() != null) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getPicturepath()));
                }
                repo.deleteMovie(selectedMovie.getIdmovie());
                moviesTableModel.setMovies(repo.getMovies());
                moviesTableModel.fireTableDataChanged(); 

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete movie!");
            }
        }
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        
        if(selectedMovie == null){
         if (formValid()) {
            try {
              
                Movie movie = new Movie(-1,
                        tfTitle.getText().trim(),
                        LocalDate.parse(tfDate.getText().trim(),Movie.DATE_FORMATTER),
                        taDescription.getText().trim(),
                        Integer.parseInt(tfDuration.getText().trim()),
                        uploadPicture()
                       
                );
                
                movie.setGenres(getSelectedGenres());
                movie.setActors(getSelectedPeople(lsActors));
                movie.setDirectors(getSelectedPeople(lsDirectors));
                
                repo.addMovie(movie);
                moviesTableModel.setMovies(repo.getMovies());
                moviesTableModel.fireTableDataChanged();

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to add movie!");
            }
        }}
        
        else{
        MessageUtils.showErrorMessage("Add movie", "Please use a clear form for adding new movies");
        }
        
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
       
        try {
            clearForm();
        } catch (Exception ex) {
            Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        tblMovies.clearSelection();
        
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
       
        
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose a movie to update");
            return;
        }
        if (formValid()) {
            try {
                if (!tfPicturePath.getText().trim().equals(selectedMovie.getPicturepath())) {
                    if (selectedMovie.getPicturepath() != null) {
                        Files.deleteIfExists(Paths.get(selectedMovie.getPicturepath()));
                    }
                    String localPicturePath = uploadPicture();
                    selectedMovie.setPicturepath(localPicturePath);
                }

                selectedMovie.setTitle(tfTitle.getText().trim());
                selectedMovie.setScreeningdate(LocalDate.parse(tfDate.getText().trim(),Movie.DATE_FORMATTER));
                selectedMovie.setDescription(taDescription.getText().trim());
                selectedMovie.setDuration(Integer.parseInt(tfDuration.getText().trim()));
                selectedMovie.setGenres(getSelectedGenres());
                selectedMovie.setActors(getSelectedPeople(lsActors));
                selectedMovie.setDirectors(getSelectedPeople(lsDirectors));

                repo.updateMovie(selectedMovie);
                moviesTableModel.setMovies(repo.getMovies());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to update movie!");
            }
        }
        
    }//GEN-LAST:event_btnEditActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddGenre;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRemoveGenre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lblDateError;
    private javax.swing.JLabel lblDescError;
    private javax.swing.JLabel lblDurationError;
    private javax.swing.JLabel lblPictureError;
    private javax.swing.JLabel lblPoster;
    private javax.swing.JLabel lblTitleError;
    private javax.swing.JList<Person> lsActors;
    private javax.swing.JList<Genre> lsAllGenres;
    private javax.swing.JList<Person> lsAllPeople;
    private javax.swing.JList<Genre> lsCurrentGenres;
    private javax.swing.JList<Person> lsDirectors;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tblMovies;
    private javax.swing.JTextField tfDate;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfPicturePath;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        
        try {
            initValidation();
            initRepository();
            initTable();
            initDragNDrop();
            loadGenresAndPeople();
            loadAllGenresModel();
            loadAllPeopleModel();
            clearForm();
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Critical error", "A critical error occurred!");
        }
        
        
    }

    private void initValidation() {
         validationFields = Arrays.asList(tfTitle, tfDuration, taDescription, tfDate, tfPicturePath);
        errorLabels = Arrays.asList(lblTitleError, lblDurationError, lblDescError, lblDateError, lblPictureError);
        elementLists = Arrays.asList(lsCurrentGenres,lsActors,lsDirectors);
        elementModels = Arrays.asList(genresModel,actorsModel,directorsModel);
        
    }

    private void initRepository() {
        repo = RepositoryFactory.getRepository();
    }

    private void initTable() throws Exception {
        
        tblMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblMovies.setAutoCreateRowSorter(true);
       
        tblMovies.setRowHeight(25);
        moviesTableModel = new MovieTableModel(repo.getMovies());
        tblMovies.setModel(moviesTableModel);
        
        
    }

    private void loadAllGenresModel() {
        
       allGenresModel.clear();
       allGenres.forEach(allGenresModel::addElement);
       lsAllGenres.setModel(allGenresModel);
        
    }
    
     private void loadGenresModel(List<Genre> genres) {
       
          genresModel.clear();
       genres.forEach(g ->{
           
       if( allGenresModel.contains(g)){
       allGenresModel.removeElement(g);
       }
       genresModel.addElement(g);
       }
       );
       lsAllGenres.setModel(allGenresModel);
       lsCurrentGenres.setModel(genresModel);
         
         
    }
    
    private void loadAllPeopleModel() {
        
       allPeopleModel.clear();
       allPeople.forEach(allPeopleModel::addElement);
       lsAllPeople.setModel(allPeopleModel);
        
    }
    
    private void loadActorsModel(List<Person> actors) {
        
       actorsModel.clear();
       actors.forEach(p ->{
           
       if( allPeopleModel.contains(p)){
       allPeopleModel.removeElement(p);
       }
       actorsModel.addElement(p);
       }
       );
       lsAllPeople.setModel(allPeopleModel);
       lsActors.setModel(actorsModel);
        
    }
    
     private void loadDirectorsModel(List<Person> directors) {
        
         directorsModel.clear();
       directors.forEach(p ->{
           
       if( allPeopleModel.contains(p)){
       allPeopleModel.removeElement(p);
       }
       directorsModel.addElement(p);
       }
       );
       lsAllPeople.setModel(allPeopleModel);
       lsDirectors.setModel(directorsModel);
         
    }

    private void loadGenresAndPeople() throws Exception {
        
        try {
            allGenres = repo.getAllGenres();
            List<Person> allPeeps = repo.getAllPeople();
            Collections.sort(allPeeps);
            allPeople = allPeeps;
        } catch (SQLException ex) {
            MessageUtils.showErrorMessage("SQL Error", "Error loading lists!");
        }
    }
    
     private boolean formValid() {
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");

            if ("Date".equals(validationFields.get(i).getName())) {
                try {
                     LocalDate.parse(tfDate.getText().trim(), Movie.DATE_FORMATTER);
                    errorLabels.get(i).setText("");
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setText("X");
                }
            }
            if ("Duration".equals(validationFields.get(i).getName())) {
                try {
                     Integer.parseInt(tfDuration.getText().trim());
                    errorLabels.get(i).setText("");
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setText("X");
                }
            }
        }

        return ok;
    }
    
     private void clearForm() throws Exception {
        validationFields.forEach(e -> e.setText(""));
        errorLabels.forEach(e -> e.setText(""));
        loadGenresAndPeople();
        loadAllGenresModel();
        loadAllPeopleModel();
        clearLists();
        
        try {
            
            lblPoster.setIcon(IconUtils.createIcon("../assets/slika1.jpg", 300, 350));
        } catch (IOException ex) {
            lblPoster.setIcon(new ImageIcon(getClass().getResource("../assets/slika1.jpg"))); 
        }
        

        selectedMovie = null;
    }

    private void showMovie() throws Exception {
        
         clearForm();
        int selectedRow = tblMovies.getSelectedRow();
        int rowIndex = tblMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) moviesTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Movie> optMovie = repo.selectMovie(selectedMovieId);
            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
                fillForm(selectedMovie);
            }
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unable to show movie!");
        }
        
    }

    private void fillForm(Movie movie) {
        
        
         if (movie.getPicturepath()!= null && Files.exists(Paths.get(movie.getPicturepath()))) {
            tfPicturePath.setText(movie.getPicturepath());
            setIcon(lblPoster, new File(movie.getPicturepath()));
        }
         
         loadActorsModel(movie.getActors());
         loadGenresModel(movie.getGenres());
         loadDirectorsModel(movie.getDirectors());
         
        tfTitle.setText(movie.getTitle());
        tfDuration.setText(String.valueOf(movie.getDuration()));
        taDescription.setText(movie.getDescription());
        tfDate.setText(movie.getScreeningdate().format(Movie.DATE_FORMATTER));
        
    }

       private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file.getAbsolutePath(), label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
           
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
        }
    }
       
       private void swapListItem(JList<Genre> sender, JList<Genre> reciever){
       
       
       Genre element = sender.getSelectedValue();
        if(element != null){
         ((DefaultListModel<Genre>)reciever.getModel()).addElement(element);
        ((DefaultListModel<Genre>)sender.getModel()).removeElement(element);
        }
       
       }

    private void initDragNDrop() {
       
        lsAllPeople.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllPeople.setDropMode(DropMode.ON);
        lsAllPeople.setDragEnabled(true);
        lsAllPeople.setTransferHandler(new ListTransferHandler(lsAllPeople));
        
        lsActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsActors.setDragEnabled(true);
        lsActors.setDropMode(DropMode.ON);
        lsActors.setTransferHandler(new ListTransferHandler(lsActors));
        
        lsDirectors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsDirectors.setDragEnabled(true);
        lsDirectors.setDropMode(DropMode.ON);
        lsDirectors.setTransferHandler(new ListTransferHandler(lsDirectors));
        
        
    }

    private List<Genre> getSelectedGenres() {
        
        List<Genre> genres = new ArrayList<>();
        
        for (int i = 0; i < lsCurrentGenres.getModel().getSize(); i++) {
            genres.add(lsCurrentGenres.getModel().getElementAt(i));
        }
        
        return genres;
        
    }

    private List<Person> getSelectedPeople(JList<Person> list) {
        
        
        List<Person> people = new ArrayList<>();
        
        for (int i = 0; i < list.getModel().getSize(); i++) {
            people.add(list.getModel().getElementAt(i));
        }
        
        return people;
        
    }
       
    private class ListTransferHandler extends TransferHandler {

            private JList<Person> list;

        public ListTransferHandler(JList<Person> list) {
            this.list = list;
        }
        
        
        
        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Person add = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);
                
                    ((DefaultListModel)list.getModel()).addElement(add);
                    ((DefaultListModel)sender.getModel()).removeElement(add);
                    return true;
                
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
        @Override
        public int getSourceActions(JComponent c) {
            return MOVE;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            
           PersonTransferable transferable = new PersonTransferable(list.getSelectedValue());
            sender = list;
           
            return  transferable;
        }
    }

   private String uploadPicture() throws IOException {
        String picturePath = tfPicturePath.getText().trim();
        String ext = picturePath.substring(picturePath.lastIndexOf("."));
        String pictureName = UUID.randomUUID() + ext;
        String localPicturePath = DIR + File.separator + pictureName;
        FileUtils.copy(picturePath, localPicturePath);
        return localPicturePath;
    }
       

    private void clearLists() {
        
        for (int i = 0; i < elementLists.size(); i++) {
            
            elementModels.get(i).clear();
            elementLists.get(i).setModel(elementModels.get(i));
        }
        
    }

   

   
}
