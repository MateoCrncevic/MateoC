/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import dal.Repository;
import dal.RepositoryFactory;
import hr.algebra.utils.MessageUtils;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.text.JTextComponent;
import models.Genre;
import models.GenreTableModel;

/**
 *
 * @author Mateo
 */
public class GenresPanel extends javax.swing.JPanel {

    private Repository repo;
    
    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;
    
    private GenreTableModel genresTableModel;
    
    private Genre selectedGenre;
    
    /**
     * Creates new form GenresPanel
     */
    public GenresPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblGenres = new javax.swing.JTable();
        tfName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnAddNew = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        lblNameError = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(1025, 927));
        setPreferredSize(new java.awt.Dimension(1025, 927));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tblGenres.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblGenres.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblGenresMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblGenres);

        jLabel1.setText("Enter gender name:");

        btnAddNew.setText("Add genre");
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update genre");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete genre");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setText("Clear ");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        lblNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblNameError.setText("X");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblNameError))
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddNew)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete))
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 211, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNameError))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddNew, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(298, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
       
        init();
        
    }//GEN-LAST:event_formComponentShown

    private void tblGenresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblGenresMouseClicked
        showGenre();
    }//GEN-LAST:event_tblGenresMouseClicked

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearForm();
        tblGenres.clearSelection();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        
         if (selectedGenre == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose a genre for deletion");
            return;
        }
        if (MessageUtils.showConfirmDialog(
                "Delete genre",
                "Do you really want to delete this genre? Doing so will delete it from all related movies") == JOptionPane.YES_OPTION) {
            try {
                
                repo.deleteGenre(selectedGenre.getIdgenre());
                genresTableModel.setGenres(repo.getAllGenres());
                 genresTableModel.fireTableDataChanged();

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(GenresPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete genre!");
            }
        }
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed
        
         if(selectedGenre == null){
         if (formValid()) {
            try {
              
                Genre genre = new Genre(-1, tfName.getText().trim()
                );
                
                repo.addGenre(genre);
                genresTableModel.setGenres(repo.getAllGenres());

                clearForm();
                genresTableModel.fireTableDataChanged();
            } catch (Exception ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to add genre!");
            }
        }}
        
        else{
        MessageUtils.showErrorMessage("Add genre", "Please use a clear form for adding new genres");
        }
        
    }//GEN-LAST:event_btnAddNewActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
       
         if (selectedGenre == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose a genre to update");
            return;
        }
        if (formValid()) {
            try {
               

                selectedGenre.setName(tfName.getText().trim());
                

                repo.updateGenre(selectedGenre);
                genresTableModel.setGenres(repo.getAllGenres());
                genresTableModel.fireTableDataChanged();

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to update genre!");
            }
        }
        
    }//GEN-LAST:event_btnUpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNew;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblNameError;
    private javax.swing.JTable tblGenres;
    private javax.swing.JTextField tfName;
    // End of variables declaration//GEN-END:variables

    private void init() {
        
         try {
            initValidation();
            initRepository();
            initTable();
            clearForm();
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Critical error", "A critical error occurred!");
        }
        
    }

    private void initValidation() {
        
         validationFields = Arrays.asList(tfName);
        errorLabels = Arrays.asList(lblNameError);
        
    }

    private void initRepository() {
        repo = RepositoryFactory.getRepository();
    }

    private void initTable() throws SQLException, Exception {
        
         tblGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblGenres.setAutoCreateRowSorter(true);
       
        tblGenres.setRowHeight(25);
        genresTableModel = new GenreTableModel(repo.getAllGenres());
        tblGenres.setModel(genresTableModel);
        
    }

    private void clearForm() {
        
        validationFields.forEach(e -> e.setText(""));
        errorLabels.forEach(e -> e.setText(""));
        selectedGenre = null;
        
    }

    private void showGenre() {
        
         clearForm();
        int selectedRow = tblGenres.getSelectedRow();
        int rowIndex = tblGenres.convertRowIndexToModel(selectedRow);
        int selectedGenreId = (int) genresTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Genre> optGenre  = repo.getGenre(selectedGenreId);
            if (optGenre.isPresent()) {
                selectedGenre = optGenre.get();
                fillForm(selectedGenre);
            }
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unable to show genre!");
        }
        
    }

    private void fillForm(Genre selectedGenre) {
        
        tfName.setText(selectedGenre.getName());
        
    }

    private boolean formValid() {
        
         boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");
        }
        
        return ok;
        
    }
}
