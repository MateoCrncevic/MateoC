/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import dal.Repository;
import dal.RepositoryFactory;
import hr.algebra.utils.MessageUtils;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.text.JTextComponent;
import models.Person;
import models.PersonTableModel;

/**
 *
 * @author Mateo
 */
public class PeoplePanel extends javax.swing.JPanel {

    private Repository repo;
    
    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;
    
    private PersonTableModel peopleTableModel;
    
    private Person selectedPerson;
    
    /**
     * Creates new form PeoplePanel
     */
    public PeoplePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPeople = new javax.swing.JTable();
        tfFirstname = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        lblFirstnameError = new javax.swing.JLabel();
        tfLastname = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        lblLastnameError = new javax.swing.JLabel();
        btnAddNew = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(1025, 927));
        setPreferredSize(new java.awt.Dimension(1025, 927));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tblPeople.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPeople.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPeopleMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPeople);

        jLabel1.setText("Firstname :");

        lblFirstnameError.setForeground(new java.awt.Color(255, 0, 0));
        lblFirstnameError.setText("X");

        jLabel3.setText("Lastname :");

        lblLastnameError.setForeground(new java.awt.Color(255, 0, 0));
        lblLastnameError.setText("X");

        btnAddNew.setText("Add person");
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update person");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete person");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setText("Clear ");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfFirstname, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblFirstnameError))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(tfLastname, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblLastnameError))))
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAddNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)))
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(111, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfFirstname, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFirstnameError)
                            .addComponent(btnDelete))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(btnUpdate))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tfLastname, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblLastnameError)))
                                .addGap(34, 34, 34)
                                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnAddNew))))
                .addContainerGap(358, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed

        if(selectedPerson == null){
            if (formValid()) {
                try {

                 Person person = new Person(tfFirstname.getText().trim(), tfLastname.getText().trim());

                    repo.addPerson(person);
                    peopleTableModel.setPeople(repo.getAllPeople());

                    clearForm();
                    peopleTableModel.fireTableDataChanged();
                } catch (Exception ex) {
                    Logger.getLogger(PeoplePanel.class.getName()).log(Level.SEVERE, null, ex);
                    MessageUtils.showErrorMessage("Error", "Unable to add person!");
                }
            }}

            else{
                MessageUtils.showErrorMessage("Add person", "Please use a clear form for adding new person");
            }

    }//GEN-LAST:event_btnAddNewActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        if (selectedPerson == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose a person to update");
            return;
        }
        if (formValid()) {
            try {

                selectedPerson.setFirstname(tfFirstname.getText().trim());
                selectedPerson.setLastname(tfLastname.getText().trim());

                repo.updatePerson(selectedPerson);
                peopleTableModel.setPeople(repo.getAllPeople());
                peopleTableModel.fireTableDataChanged();

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(MoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to update person!");
            }
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        if (selectedPerson == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose a person for deletion");
            return;
        }
        if (MessageUtils.showConfirmDialog(
            "Delete person",
            "Do you really want to delete this person? Doing so will delete it from all related movies") == JOptionPane.YES_OPTION) {
        try {

            repo.deletePerson(selectedPerson.getIdperson());
            peopleTableModel.setPeople(repo.getAllPeople());
            peopleTableModel.fireTableDataChanged();

            clearForm();
        } catch (Exception ex) {
            Logger.getLogger(PeoplePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to delete person!");
        }
        }

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearForm();
        tblPeople.clearSelection();
    }//GEN-LAST:event_btnClearActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void tblPeopleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPeopleMouseClicked
       showPerson();
    }//GEN-LAST:event_tblPeopleMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNew;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFirstnameError;
    private javax.swing.JLabel lblLastnameError;
    private javax.swing.JTable tblPeople;
    private javax.swing.JTextField tfFirstname;
    private javax.swing.JTextField tfLastname;
    // End of variables declaration//GEN-END:variables

    private void init() {
         try {
            initValidation();
            initRepository();
            initTable();
            clearForm();
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Critical error", "A critical error occurred!");
        }
    }

    private void initValidation() {
       
         validationFields = Arrays.asList(tfFirstname,tfLastname);
        errorLabels = Arrays.asList(lblFirstnameError,lblLastnameError);
        
    }

    private void initRepository() {
        repo = RepositoryFactory.getRepository();
    }

    private void initTable() throws SQLException, Exception {
        
        tblPeople.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblPeople.setAutoCreateRowSorter(true);
       
        tblPeople.setRowHeight(25);
        peopleTableModel = new PersonTableModel(repo.getAllPeople());
        tblPeople.setModel(peopleTableModel);
        
    }

    private void clearForm() {
       
        validationFields.forEach(e -> e.setText(""));
        errorLabels.forEach(e -> e.setText(""));
        selectedPerson = null;
        
    }

    private void showPerson() {
        
          clearForm();
        int selectedRow = tblPeople.getSelectedRow();
        int rowIndex = tblPeople.convertRowIndexToModel(selectedRow);
        int selectedPersonId = (int) peopleTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Person> optPerson  = repo.getPerson(selectedPersonId);
            if (optPerson.isPresent()) {
                selectedPerson = optPerson.get();
                fillForm(selectedPerson);
            }
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unable to show person!");
        }
        
    }

    private void fillForm(Person selectedPerson) {
        
        tfFirstname.setText(selectedPerson.getFirstname());
        tfLastname.setText(selectedPerson.getLastname());
        
    }

    private boolean formValid() {
       
          boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");
        }
        
        return ok;
        
    }
}
